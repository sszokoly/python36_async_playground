#!/usr/bin/expect
# Obtains command output from Avaya gateway
# Usage: expect g4xx_cmd_runner.exp "host=10.10.48.58,user=root,passwd=cmb@Dm1n,commands=show rtp-stat session last 20"
log_user 0
set log_file "expect_debug.log"

if {[info exists log_file] && $log_file ne "/dev/null"} {
    if {[file exists $log_file]} {
        file delete $log_file
    }
}

exp_internal -f $log_file 0

################################# Variables #################################

array set input_array {}
array set commands_array {}
array set rtp_sessions_array {}
set global_ids [list]
set prompt "\)# "
set timeout 10
set lastn_secs 10

################################# Procedures #################################

proc merge_lists {list1 list2} {
    set combined [concat $list1 $list2]
    set result [lsort -unique $combined]
    return $result
}

proc to_json {} {
    global host gw_number commands_array rtp_sessions_array
    set json "{"
    append json "\"host\": \"$host\", "
    append json "\"gw_number\": \"$gw_number\", "  
    append json "\"commands\": {"
    foreach {key value} [array get commands_array] {
        append json "\"$key\": \'$value\', "
        #append json "\"$key\": \"$value\", "
    }
    set json [string trimright $json ", "]
    append json "}, \"rtp_sessions\": {"
    foreach {key value} [array get rtp_sessions_array] {
        append json "\"$key\": \'$value\', "
        #append json "\"$key\": \"$value\", "
    }
    set json [string trimright $json ", "]
    append json "}}"
    return $json
}


proc clean_output {output} {
    set pattern {\r\n\-\-type q to quit or space key to continue\-\- .+?K}
    regsub -all $pattern $output "" output
    set lines [split $output "\n"]
    set prompt_removed [lrange $lines 0 end-1]
    set output [join $prompt_removed "\n"]
    #regsub -all {"} $output {\"} output_escaped_quotes
    #set result [string trimright $output_escaped_quotes "\r\n"]
    set result [string trimright $output "\r\n"]
    return $result
}

proc cmd {command} {
    global prompt
    set output ""
    send "$command"
    expect {
        $prompt {
            set current_output $expect_out(buffer)
            append output $current_output
        }
        "*continue-- " {
            set current_output $expect_out(buffer)
            append output $current_output
            send "\n"
            exp_continue
        }
        "*to continue." {
            set current_output $expect_out(buffer)
            append output $current_output
            exp_continue
        }
        "*." {
            set current_output $expect_out(buffer)
            append output $current_output
            sleep 1
            exp_continue
        }
        timeout {
            puts stderr "Timeout";
            return ""
        }
    }
    set result [clean_output $output]
    return [string trimleft $result $command]
}

proc get_active_global_ids {} {
    global host cmd parse_session_summary_line
    set ids [list]
    foreach line [split [cmd "show rtp-stat sessions active\n"] "\n"] {
        if {[regexp {^[0-9]+} $line]} {
            set result [parse_session_summary_line $line]
            lassign $result session_id start_date start_time end_date end_time
            lappend ids [format "%s,%s,%s,%s" $start_date $start_time $host $session_id]
        }
    }
    return $ids
}

proc get_recent_global_ids {{lastn_secs {3620}}} {
    global host cmd parse_session_summary_line is_date1_gt_date2
    set ref_datetime [exec date "+%Y-%m-%d,%H:%M:%S" -d "now - $lastn_secs secs"]
    set ids [list]
    foreach line [split [cmd "show rtp-stat sessions last 20\n"] "\n"] {
        if {[regexp {^[0-9]+} $line]} {
            set result [parse_session_summary_line $line]
            lassign $result session_id start_date start_time end_date end_time
            if {$end_time ne "-"} {
                set end_datetime [format "%s,%s" $end_date $end_time]
                set is_end_datetime_gt_ref_datetime [is_date1_gt_date2 $end_datetime $ref_datetime]
                if {$is_end_datetime_gt_ref_datetime} {
                    lappend ids [format "%s,%s,%s,%s" $start_date $start_time $host $session_id]
                }
            }
        }
    }
    return $ids
}

proc parse_session_summary_line {input} {
    # Use a regular expression to extract the date and times
    set pattern {^(\S+)\s+(\S+),(\S+)\s+(\S+)\s+.*$}
    if {[regexp $pattern $input _ id start_date start_time end_time]} {
        # if end time rolled over to the next day
        if { $end_time < $start_time } {
            set end_date [exec date "+%Y-%m-%d" -d "$start_date + 1 day"]
        } else {
            set end_date $start_date
        }
        return [list $id "$start_date" "$start_time" "$end_date" "$end_time"]
    } else {
        return "Error: Input format does not match"
    }
}

proc is_date1_gt_date2 {date1 date2} {
    # Convert the date strings into epoch timestamps
    set timestamp1 [clock scan $date1 -format "%Y-%m-%d,%H:%M:%S"]
    set timestamp2 [clock scan $date2 -format "%Y-%m-%d,%H:%M:%S"]
    # Compare the timestamps
    if {$timestamp1 > $timestamp2} {
        return 1
    } else { 
        return 0 
    }
}

#################################### Main ####################################

#Parses input arguments
set input_string [lindex $argv 0]
set kv_pairs [split $input_string ","]
foreach pair $kv_pairs {
    set key [lindex [split $pair "="] 0]
    set value [lindex [split $pair "="] 1]
    set input_array($key) $value
}

#Verifies if all mandatory arguments exist
foreach key [list host user passwd] {
    if {![info exists input_array($key)]} {
        puts stderr "Argument $key not found";
        puts stderr "Required arguments: host, user, passwd"
        exit 1;
    } else {
        eval set $key $input_array($key)
    }
}

#Verify if "commands" arguments exist and builds a list out of it
if {[info exists input_array(commands)]} {
    set commands [split $input_array(commands) "|"]
}

#Verify if "timeout" arguments exist and updates current timeout
if {[info exists input_array(timeout)]} {
    set timeout $input_array(timeout)
}

#Spawn SSH connection
spawn ssh -q -o StrictHostKeyChecking=no -o UserKnownHostsFile=/dev/null $user@$host

#Handle SSH connection
expect {
    "Password: " {send "$passwd\n"}
    timeout {
        puts stderr "Timeout";
        exit 255
    }
    eof {
        puts stderr "Timeout";
        exit 255
    }
}
expect {
    "*Permission denied*" {
        puts stderr "Permission denied";
        exit 254
    }
    $prompt {}
}

#Extract gateway number from prompt
regexp {([^\s]+)-(\d+)[\(]} $expect_out(buffer) "" _ gw_number
if {$gw_number ne ""} {
    set gw_number $gw_number
} else {
    set gw_number ""
}

#Iterate through "commands" and run each
if {[info exists input_array(commands)]} {
    foreach command $commands {
        set output [cmd "$command\n"]
        if {$output ne ""} {
            set commands_array($command) $output
        }
    }
}

#Active sessions
set active_global_ids [get_active_global_ids]
# puts "ACTIVE GLOBAL IDs"
# foreach item $active_global_ids {
#     puts $item
# }

#Recent sessions
set recent_global_ids [get_recent_global_ids]
# puts "RECENT GLOBAL IDs"
# foreach item $recent_global_ids {
#     puts $item
# }

#Merged sessions
set merged_global_ids [merge_lists $active_global_ids $recent_global_ids]
# puts "MERGED GLOBAL IDs"
# foreach item $recent_global_ids {
#     puts $item
# }

if {$merged_global_ids ne {}} {
    foreach global_id $merged_global_ids {
        lassign [split $global_id ","] start_date start_time host session_id
        set output [cmd "show rtp-stat detailed $session_id\n"]
        if {$output ne ""} {
            set rtp_sessions_array($global_id) $output
        }
    }
}

#Output results in JSON format
puts [to_json]
