parent: waiting for sync byte
parent: telling child to go ahead
parent: now unsynchronized from child
spawn: returns {7667}

expect: does "" (spawn_id exp5) match glob pattern "Password: "? no
Password: 
expect: does "\rPassword: " (spawn_id exp5) match glob pattern "Password: "? yes
expect: set expect_out(0,string) "Password: "
expect: set expect_out(spawn_id) "exp5"
expect: set expect_out(buffer) "\rPassword: "
send: sending "cmb@Dm1n\n" to { exp5 }

expect: does "" (spawn_id exp5) match glob pattern "*Permission denied*"? no
")# "? no


expect: does "\r\n" (spawn_id exp5) match glob pattern "*Permission denied*"? no
")# "? no

expect: does "\r\n\r" (spawn_id exp5) match glob pattern "*Permission denied*"? no
")# "? no




Last login: 7-Dec-2024 14:31:51

Survivable-call-engine is disabled

AvayaG450A-001(super)# 
expect: does "\r\n\r\n\r\n\r\n\r\nLast login: 7-Dec-2024 14:31:51\r\n\r\nSurvivable-call-engine is disabled\r\n\r\nAvayaG450A-001(super)# " (spawn_id exp5) match glob pattern "*Permission denied*"? no
")# "? yes
expect: set expect_out(0,string) ")# "
expect: set expect_out(spawn_id) "exp5"
expect: set expect_out(buffer) "\r\n\r\n\r\n\r\n\r\nLast login: 7-Dec-2024 14:31:51\r\n\r\nSurvivable-call-engine is disabled\r\n\r\nAvayaG450A-001(super)# "
send: sending "show utilization\n" to { exp5 }

expect: does "" (spawn_id exp5) match glob pattern ")# "? no
"*continue-- "? no
"*to continue."? no
"*."? no
s
expect: does "s" (spawn_id exp5) match glob pattern ")# "? no
"*continue-- "? no
"*to continue."? no
"*."? no
how utilization

Mod   CPU      CPU     RAM      RAM
      5sec     60sec   used(%)  Total(Kb)
---   ------   -----  -------  ----------
10       2%       3%    48%     190834 Kb

AvayaG450A-001(super)# 
expect: does "show utilization\r\n\r\nMod   CPU      CPU     RAM      RAM\r\n      5sec     60sec   used(%)  Total(Kb)\r\n---   ------   -----  -------  ----------\r\n10       2%       3%    48%     190834 Kb\r\n\r\nAvayaG450A-001(super)# " (spawn_id exp5) match glob pattern ")# "? yes
expect: set expect_out(0,string) ")# "
expect: set expect_out(spawn_id) "exp5"
expect: set expect_out(buffer) "show utilization\r\n\r\nMod   CPU      CPU     RAM      RAM\r\n      5sec     60sec   used(%)  Total(Kb)\r\n---   ------   -----  -------  ----------\r\n10       2%       3%    48%     190834 Kb\r\n\r\nAvayaG450A-001(super)# "
send: sending "show voip-dsp\n" to { exp5 }

expect: does "" (spawn_id exp5) match glob pattern ")# "? no
"*continue-- "? no
"*to continue."? no
"*."? no
s
expect: does "s" (spawn_id exp5) match glob pattern ")# "? no
"*continue-- "? no
"*to continue."? no
"*."? no
how voip-dsp
DSP #1 PARAMETERS
--------------------------------------------------------------
Board type     : MP160
Hw Vintage     : 0 B
Fw Vintage     : 182

DSP#1 CURRENT STATE
--------------------------------------------------------------
In Use         : 0 of 160 channels, 0 of 4800 points (0.0% used)
State          : Idle
Admin State    : Release

Core# Channels Admin     State
      In Use   State
----- -------- --------- -------
    1  0 of 40   Release Idle
    2  0 of 40   Release Idle
    3  0 of 40   Release Idle
    4  0 of 40   Release Idle


DSP #2 Not Present


--type q to quit or space key to continue-- 
expect: does "show voip-dsp\r\nDSP #1 PARAMETERS\r\n--------------------------------------------------------------\r\nBoard type     : MP160\r\nHw Vintage     : 0 B\r\nFw Vintage     : 182\r\n\r\nDSP#1 CURRENT STATE\r\n--------------------------------------------------------------\r\nIn Use         : 0 of 160 channels, 0 of 4800 points (0.0% used)\r\nState          : Idle\r\nAdmin State    : Release\r\n\r\nCore# Channels Admin     State\r\n      In Use   State\r\n----- -------- --------- -------\r\n    1  0 of 40   Release Idle\r\n    2  0 of 40   Release Idle\r\n    3  0 of 40   Release Idle\r\n    4  0 of 40   Release Idle\r\n\r\n\r\nDSP #2 Not Present\r\n\r\n\r\n--type q to quit or space key to continue-- " (spawn_id exp5) match glob pattern ")# "? no
"*continue-- "? yes
expect: set expect_out(0,string) "show voip-dsp\r\nDSP #1 PARAMETERS\r\n--------------------------------------------------------------\r\nBoard type     : MP160\r\nHw Vintage     : 0 B\r\nFw Vintage     : 182\r\n\r\nDSP#1 CURRENT STATE\r\n--------------------------------------------------------------\r\nIn Use         : 0 of 160 channels, 0 of 4800 points (0.0% used)\r\nState          : Idle\r\nAdmin State    : Release\r\n\r\nCore# Channels Admin     State\r\n      In Use   State\r\n----- -------- --------- -------\r\n    1  0 of 40   Release Idle\r\n    2  0 of 40   Release Idle\r\n    3  0 of 40   Release Idle\r\n    4  0 of 40   Release Idle\r\n\r\n\r\nDSP #2 Not Present\r\n\r\n\r\n--type q to quit or space key to continue-- "
expect: set expect_out(spawn_id) "exp5"
expect: set expect_out(buffer) "show voip-dsp\r\nDSP #1 PARAMETERS\r\n--------------------------------------------------------------\r\nBoard type     : MP160\r\nHw Vintage     : 0 B\r\nFw Vintage     : 182\r\n\r\nDSP#1 CURRENT STATE\r\n--------------------------------------------------------------\r\nIn Use         : 0 of 160 channels, 0 of 4800 points (0.0% used)\r\nState          : Idle\r\nAdmin State    : Release\r\n\r\nCore# Channels Admin     State\r\n      In Use   State\r\n----- -------- --------- -------\r\n    1  0 of 40   Release Idle\r\n    2  0 of 40   Release Idle\r\n    3  0 of 40   Release Idle\r\n    4  0 of 40   Release Idle\r\n\r\n\r\nDSP #2 Not Present\r\n\r\n\r\n--type q to quit or space key to continue-- "
send: sending "\n" to { exp5 }
expect: continuing expect

expect: does "" (spawn_id exp5) match glob pattern ")# "? no
"*continue-- "? no
"*to continue."? no
"*."? no

expect: does "\r" (spawn_id exp5) match glob pattern ")# "? no
"*continue-- "? no
"*to continue."? no
"*."? no
[K
DSP #3 Not Present


DSP #4 Not Present

Done!
AvayaG450A-001(super)# 
expect: does "\r\u001b[K\r\nDSP #3 Not Present\r\n\r\n\r\nDSP #4 Not Present\r\n\r\nDone!\r\nAvayaG450A-001(super)# " (spawn_id exp5) match glob pattern ")# "? yes
expect: set expect_out(0,string) ")# "
expect: set expect_out(spawn_id) "exp5"
expect: set expect_out(buffer) "\r\u001b[K\r\nDSP #3 Not Present\r\n\r\n\r\nDSP #4 Not Present\r\n\r\nDone!\r\nAvayaG450A-001(super)# "
send: sending "show capture\n" to { exp5 }

expect: does "" (spawn_id exp5) match glob pattern ")# "? no
"*continue-- "? no
"*to continue."? no
"*."? no
s
expect: does "s" (spawn_id exp5) match glob pattern ")# "? no
"*continue-- "? no
"*to continue."? no
"*."? no
how capture

Capture service is enabled and inactive
Capture start time not-started
Capture stop time not-stopped
Current buffer size is 1024 KB
Buffer mode is cyclic
Maximum number of bytes captured from each frame: 1500
Capture list 500 on all interfaces
Capture IPSec decrypted
Number of captured frames in file: 0 (out of 0 total captured frames)
Memory buffer occupancy: 0.0 % (including overheads)
AvayaG450A-001(super)# 
expect: does "show capture\r\n\r\nCapture service is enabled and inactive\r\nCapture start time not-started\r\nCapture stop time not-stopped\r\nCurrent buffer size is 1024 KB\r\nBuffer mode is cyclic\r\nMaximum number of bytes captured from each frame: 1500\r\nCapture list 500 on all interfaces\r\nCapture IPSec decrypted\r\nNumber of captured frames in file: 0 (out of 0 total captured frames)\r\nMemory buffer occupancy: 0.0 % (including overheads)\r\nAvayaG450A-001(super)# " (spawn_id exp5) match glob pattern ")# "? yes
expect: set expect_out(0,string) ")# "
expect: set expect_out(spawn_id) "exp5"
expect: set expect_out(buffer) "show capture\r\n\r\nCapture service is enabled and inactive\r\nCapture start time not-started\r\nCapture stop time not-stopped\r\nCurrent buffer size is 1024 KB\r\nBuffer mode is cyclic\r\nMaximum number of bytes captured from each frame: 1500\r\nCapture list 500 on all interfaces\r\nCapture IPSec decrypted\r\nNumber of captured frames in file: 0 (out of 0 total captured frames)\r\nMemory buffer occupancy: 0.0 % (including overheads)\r\nAvayaG450A-001(super)# "
send: sending "show rtp-stat sessions active\n" to { exp5 }

expect: does "" (spawn_id exp5) match glob pattern ")# "? no
"*continue-- "? no
"*to continue."? no
"*."? no
s
expect: does "s" (spawn_id exp5) match glob pattern ")# "? no
"*continue-- "? no
"*to continue."? no
"*."? no
how rtp-stat sessions active

No sessions to show.
Done!
AvayaG450A-001(super)# 
expect: does "show rtp-stat sessions active\r\n\r\nNo sessions to show.\r\nDone!\r\nAvayaG450A-001(super)# " (spawn_id exp5) match glob pattern ")# "? yes
expect: set expect_out(0,string) ")# "
expect: set expect_out(spawn_id) "exp5"
expect: set expect_out(buffer) "show rtp-stat sessions active\r\n\r\nNo sessions to show.\r\nDone!\r\nAvayaG450A-001(super)# "
send: sending "show rtp-stat sessions last 20\n" to { exp5 }

expect: does "" (spawn_id exp5) match glob pattern ")# "? no
"*continue-- "? no
"*to continue."? no
"*."? no
s
expect: does "s" (spawn_id exp5) match glob pattern ")# "? no
"*continue-- "? no
"*to continue."? no
"*."? no
how rtp-stat sessions last 20

ID    QoS Start date and time End Time Type            Destination
----- --- ------------------- -------- --------------- ---------------------------------------
00064     2024-12-07,10:31:58 10:32:27           G711U                             10.10.48.92
00065     2024-12-07,10:32:00 10:32:27           G711U                            10.10.48.166
00066     2024-12-07,10:33:05 10:33:23           G711U                             10.10.48.92
00067     2024-12-07,10:33:07 10:33:23           G711U                            10.10.48.166
00068     2024-12-07,10:35:28 10:35:44           G711U                             10.10.48.92
00069     2024-12-07,10:35:29 10:35:44           G711U                            10.10.48.166
00070     2024-12-07,10:36:27 10:36:30           G711U                             10.10.48.92
00071     2024-12-07,10:36:28 10:36:30           G711U                            10.10.48.166
00072     2024-12-07,10:40:36 10:40:45           G711U                             10.10.48.92
00073     2024-12-07,10:40:37 10:40:45           G711U                           
--type q to quit or space key to continue-- 
expect: does "show rtp-stat sessions last 20\r\n\r\nID    QoS Start date and time End Time Type            Destination\r\n----- --- ------------------- -------- --------------- ---------------------------------------\r\n00064     2024-12-07,10:31:58 10:32:27           G711U                             10.10.48.92\r\n00065     2024-12-07,10:32:00 10:32:27           G711U                            10.10.48.166\r\n00066     2024-12-07,10:33:05 10:33:23           G711U                             10.10.48.92\r\n00067     2024-12-07,10:33:07 10:33:23           G711U                            10.10.48.166\r\n00068     2024-12-07,10:35:28 10:35:44           G711U                             10.10.48.92\r\n00069     2024-12-07,10:35:29 10:35:44           G711U                            10.10.48.166\r\n00070     2024-12-07,10:36:27 10:36:30           G711U                             10.10.48.92\r\n00071     2024-12-07,10:36:28 10:36:30           G711U                            10.10.48.166\r\n00072     2024-12-07,10:40:36 10:40:45           G711U                             10.10.48.92\r\n00073     2024-12-07,10:40:37 10:40:45           G711U                           \r\n--type q to quit or space key to continue-- " (spawn_id exp5) match glob pattern ")# "? no
"*continue-- "? yes
expect: set expect_out(0,string) "show rtp-stat sessions last 20\r\n\r\nID    QoS Start date and time End Time Type            Destination\r\n----- --- ------------------- -------- --------------- ---------------------------------------\r\n00064     2024-12-07,10:31:58 10:32:27           G711U                             10.10.48.92\r\n00065     2024-12-07,10:32:00 10:32:27           G711U                            10.10.48.166\r\n00066     2024-12-07,10:33:05 10:33:23           G711U                             10.10.48.92\r\n00067     2024-12-07,10:33:07 10:33:23           G711U                            10.10.48.166\r\n00068     2024-12-07,10:35:28 10:35:44           G711U                             10.10.48.92\r\n00069     2024-12-07,10:35:29 10:35:44           G711U                            10.10.48.166\r\n00070     2024-12-07,10:36:27 10:36:30           G711U                             10.10.48.92\r\n00071     2024-12-07,10:36:28 10:36:30           G711U                            10.10.48.166\r\n00072     2024-12-07,10:40:36 10:40:45           G711U                             10.10.48.92\r\n00073     2024-12-07,10:40:37 10:40:45           G711U                           \r\n--type q to quit or space key to continue-- "
expect: set expect_out(spawn_id) "exp5"
expect: set expect_out(buffer) "show rtp-stat sessions last 20\r\n\r\nID    QoS Start date and time End Time Type            Destination\r\n----- --- ------------------- -------- --------------- ---------------------------------------\r\n00064     2024-12-07,10:31:58 10:32:27           G711U                             10.10.48.92\r\n00065     2024-12-07,10:32:00 10:32:27           G711U                            10.10.48.166\r\n00066     2024-12-07,10:33:05 10:33:23           G711U                             10.10.48.92\r\n00067     2024-12-07,10:33:07 10:33:23           G711U                            10.10.48.166\r\n00068     2024-12-07,10:35:28 10:35:44           G711U                             10.10.48.92\r\n00069     2024-12-07,10:35:29 10:35:44           G711U                            10.10.48.166\r\n00070     2024-12-07,10:36:27 10:36:30           G711U                             10.10.48.92\r\n00071     2024-12-07,10:36:28 10:36:30           G711U                            10.10.48.166\r\n00072     2024-12-07,10:40:36 10:40:45           G711U                             10.10.48.92\r\n00073     2024-12-07,10:40:37 10:40:45           G711U                           \r\n--type q to quit or space key to continue-- "
send: sending "\n" to { exp5 }
expect: continuing expect

expect: does "" (spawn_id exp5) match glob pattern ")# "? no
"*continue-- "? no
"*to continue."? no
"*."? no

expect: does "\r" (spawn_id exp5) match glob pattern ")# "? no
"*continue-- "? no
"*to continue."? no
"*."? no
[K 10.10.48.166
00074     2024-12-07,10:44:25 10:44:37           G711U                             10.10.48.92
00075     2024-12-07,10:44:27 10:44:37           G711U                            10.10.48.166
00076     2024-12-07,11:18:04 11:18:09           G711U                             10.10.48.92
00077     2024-12-07,11:18:06 11:18:09           G711U                            10.10.48.166
00078     2024-12-07,13:26:23 13:26:52           G711U                             10.10.48.92
00079     2024-12-07,13:26:25 13:26:52           G711U                            10.10.48.166
00080     2024-12-07,13:28:21 13:29:10           G711U                             10.10.48.92
00081     2024-12-07,13:28:22 13:29:10           G711U                            10.10.48.166
00082     2024-12-07,14:24:46 14:25:38           G711U                             10.10.48.92
00083     2024-12-07,14:24:47 14:25:38           G711U                            10.10.48.166
Note that field "Type" indicates the codec in use, which may not match the call manager ip-codec configuration.

--type q to quit or space key to continue-- 
expect: does "\r\u001b[K 10.10.48.166\r\n00074     2024-12-07,10:44:25 10:44:37           G711U                             10.10.48.92\r\n00075     2024-12-07,10:44:27 10:44:37           G711U                            10.10.48.166\r\n00076     2024-12-07,11:18:04 11:18:09           G711U                             10.10.48.92\r\n00077     2024-12-07,11:18:06 11:18:09           G711U                            10.10.48.166\r\n00078     2024-12-07,13:26:23 13:26:52           G711U                             10.10.48.92\r\n00079     2024-12-07,13:26:25 13:26:52           G711U                            10.10.48.166\r\n00080     2024-12-07,13:28:21 13:29:10           G711U                             10.10.48.92\r\n00081     2024-12-07,13:28:22 13:29:10           G711U                            10.10.48.166\r\n00082     2024-12-07,14:24:46 14:25:38           G711U                             10.10.48.92\r\n00083     2024-12-07,14:24:47 14:25:38           G711U                            10.10.48.166\r\nNote that field "Type" indicates the codec in use, which may not match the call manager ip-codec configuration.\r\n\r\n--type q to quit or space key to continue-- " (spawn_id exp5) match glob pattern ")# "? no
"*continue-- "? yes
expect: set expect_out(0,string) "\r\u001b[K 10.10.48.166\r\n00074     2024-12-07,10:44:25 10:44:37           G711U                             10.10.48.92\r\n00075     2024-12-07,10:44:27 10:44:37           G711U                            10.10.48.166\r\n00076     2024-12-07,11:18:04 11:18:09           G711U                             10.10.48.92\r\n00077     2024-12-07,11:18:06 11:18:09           G711U                            10.10.48.166\r\n00078     2024-12-07,13:26:23 13:26:52           G711U                             10.10.48.92\r\n00079     2024-12-07,13:26:25 13:26:52           G711U                            10.10.48.166\r\n00080     2024-12-07,13:28:21 13:29:10           G711U                             10.10.48.92\r\n00081     2024-12-07,13:28:22 13:29:10           G711U                            10.10.48.166\r\n00082     2024-12-07,14:24:46 14:25:38           G711U                             10.10.48.92\r\n00083     2024-12-07,14:24:47 14:25:38           G711U                            10.10.48.166\r\nNote that field "Type" indicates the codec in use, which may not match the call manager ip-codec configuration.\r\n\r\n--type q to quit or space key to continue-- "
expect: set expect_out(spawn_id) "exp5"
expect: set expect_out(buffer) "\r\u001b[K 10.10.48.166\r\n00074     2024-12-07,10:44:25 10:44:37           G711U                             10.10.48.92\r\n00075     2024-12-07,10:44:27 10:44:37           G711U                            10.10.48.166\r\n00076     2024-12-07,11:18:04 11:18:09           G711U                             10.10.48.92\r\n00077     2024-12-07,11:18:06 11:18:09           G711U                            10.10.48.166\r\n00078     2024-12-07,13:26:23 13:26:52           G711U                             10.10.48.92\r\n00079     2024-12-07,13:26:25 13:26:52           G711U                            10.10.48.166\r\n00080     2024-12-07,13:28:21 13:29:10           G711U                             10.10.48.92\r\n00081     2024-12-07,13:28:22 13:29:10           G711U                            10.10.48.166\r\n00082     2024-12-07,14:24:46 14:25:38           G711U                             10.10.48.92\r\n00083     2024-12-07,14:24:47 14:25:38           G711U                            10.10.48.166\r\nNote that field "Type" indicates the codec in use, which may not match the call manager ip-codec configuration.\r\n\r\n--type q to quit or space key to continue-- "
send: sending "\n" to { exp5 }
expect: continuing expect

expect: does "" (spawn_id exp5) match glob pattern ")# "? no
"*continue-- "? no
"*to continue."? no
"*."? no

expect: does "\r" (spawn_id exp5) match glob pattern ")# "? no
"*continue-- "? no
"*to continue."? no
"*."? no
[KDone!
AvayaG450A-001(super)# 
expect: does "\r\u001b[KDone!\r\nAvayaG450A-001(super)# " (spawn_id exp5) match glob pattern ")# "? yes
expect: set expect_out(0,string) ")# "
expect: set expect_out(spawn_id) "exp5"
expect: set expect_out(buffer) "\r\u001b[KDone!\r\nAvayaG450A-001(super)# "
send: sending "exit\n" to { exp5 }
argv[0] = expect  argv[1] = -c  argv[2] = 
#!/usr/bin/expect
log_user 0
set log_file debug_10.10.48.58.log

if {[info exists log_file] && $log_file ne "/dev/null"} {
    if {[file exists $log_file]} {
        file delete $log_file
    }
}

exp_internal -f $log_file 0

############################# Template Variables #############################

set timeout 10
set host 10.10.48.58
set user root
set passwd cmb@Dm1n
set lastn_secs 3620
set rtp_stat 1
set commands { "show utilization" "show voip-dsp" "show capture" }

############################## Expect Variables ##############################

set prompt "\)# "
array set commands_array {}
array set rtp_sessions_array {}
set global_ids [list]

################################# Procedures #################################

proc to_json {} {
    global host gw_number commands_array rtp_sessions_array
    set json "{"
    append json "\"host\": \"$host\", "
    append json "\"gw_number\": \"$gw_number\", "  
    append json "\"commands\": {"
    foreach {key value} [array get commands_array] {
        append json "\"$key\": \"$value\", "
    }
    set json [string trimright $json ", "]
    append json "}, "
    append json "\"rtp_sessions\": {"
    foreach {key value} [array get rtp_sessions_array] {
        append json "\"$key\": \"$value\", "
    }
    set json [string trimright $json ", "]
    append json "}}"
    return $json
}

proc merge_lists {list1 list2} {
    set combined [concat $list1 $list2]
    set result [lsort -unique $combined]
    return $result
}

proc clean_output {output} {
    set pattern {\r\n\-\-type q to quit or space key to continue\-\- .+?K}
    regsub -all $pattern $output "" output
    set lines [split $output "\n"]
    set prompt_removed [lrange $lines 0 end-1]
    set output [join $prompt_removed "\n"]
    regsub -all {"} $output {\"} output_escaped_quotes
    set result [string trimright $output_escaped_quotes "\r\n"]
    return $result
}

proc cmd {command} {
    global prompt
    set output ""
    send "$command"
    expect {
        $prompt {
            set current_output $expect_out(buffer)
            append output $current_output
        }
        "*continue-- " {
            set current_output $expect_out(buffer)
            append output $current_output
            send "\n"
            exp_continue
        }
        "*to continue." {
            set current_output $expect_out(buffer)
            append output $current_output
            exp_continue
        }
        "*." {
            set current_output $expect_out(buffer)
            append output $current_output
            sleep 1
            exp_continue
        }
        timeout {
            puts stderr "Timeout";
            return ""
        }
    }
    set result [clean_output $output]
    return [string trimleft $result $command]
}

proc get_active_global_ids {} {
    global host cmd parse_session_summary_line
    set ids [list]
    foreach line [split [cmd "show rtp-stat sessions active\n"] "\n"] {
        if {[regexp {^[0-9]+} $line]} {
            set result [parse_session_summary_line $line]
            lassign $result session_id start_date start_time end_date end_time
            lappend ids [format "%s,%s,%s,%s" $start_date $start_time $host $session_id]
        }
    }
    return $ids
}

proc get_recent_global_ids {{lastn_secs {20}}} {
    global host cmd parse_session_summary_line is_date1_gt_date2
    set ref_datetime [exec date "+%Y-%m-%d,%H:%M:%S" -d "now - $lastn_secs secs"]
    set ids [list]
    foreach line [split [cmd "show rtp-stat sessions last 20\n"] "\n"] {
        if {[regexp {^[0-9]+} $line]} {
            set result [parse_session_summary_line $line]
            lassign $result session_id start_date start_time end_date end_time
            if {$end_time ne "-"} {
                set end_datetime [format "%s,%s" $end_date $end_time]
                set is_end_datetime_gt_ref_datetime [is_date1_gt_date2 $end_datetime $ref_datetime]
                if {$is_end_datetime_gt_ref_datetime} {
                    lappend ids [format "%s,%s,%s,%s" $start_date $start_time $host $session_id]
                }
            }
        }
    }
    return $ids
}

proc parse_session_summary_line {input} {
    set pattern {^(\S+)\s+(\S+),(\S+)\s+(\S+)\s+.*$}
    if {[regexp $pattern $input _ id start_date start_time end_time]} {
        # if end time rolled over to the next day
        if {$end_time < $start_time} {
            set end_date [exec date "+%Y-%m-%d" -d "$start_date + 1 day"]
        } else {
            set end_date $start_date
        }
        return [list $id "$start_date" "$start_time" "$end_date" "$end_time"]
    } else {
        puts stderr "Error: Input format does not match: $input";
        return ""
    }
}

proc is_date1_gt_date2 {date1 date2} {
    # Convert the date strings into epoch timestamps
    set timestamp1 [clock scan $date1 -format "%Y-%m-%d,%H:%M:%S"]
    set timestamp2 [clock scan $date2 -format "%Y-%m-%d,%H:%M:%S"]
    # Compare the timestamps
    if {$timestamp1 > $timestamp2} {
        return 1
    } else {
        return 0 
    }
}


################################# Main Script ################################

#Spawn SSH connection
spawn ssh -q -o StrictHostKeyChecking=no -o UserKnownHostsFile=/dev/null $user@$host

#Handle SSH connection
expect {
    "Password: " {send "$passwd\n"}
    timeout {
        puts stderr "Timeout";
        exit 255
    }
    eof {
        puts stderr "Timeout";
        exit 255
    }
}
expect {
    "*Permission denied*" {
        puts stderr "Permission denied";
        exit 254
    }
    $prompt {}
}

#Extract gateway number from prompt
regexp {([^\s]+)-(\d+)[\(]} $expect_out(buffer) "" _ gw_number
if {$gw_number ne ""} {
    set gw_number $gw_number
} else {
    set gw_number ""
}

#Iterate through "commands" and run each
foreach command $commands {
    set output [cmd "$command\n"]
    if {$output ne ""} {
        set commands_array($command) $output
    }
}

#Collect RTP statistics if requested
if {$rtp_stat} {
    #Active global session ids
    set active_global_ids [get_active_global_ids]
    #Recent global session ids
    set recent_global_ids [get_recent_global_ids $lastn_secs]
    #Merged global session ids
    set merged_global_ids [merge_lists $active_global_ids $recent_global_ids]

    if {$merged_global_ids ne {}} {
        foreach global_id $merged_global_ids {
            lassign [split $global_id ","] start_date start_time host session_id
            set output [cmd "show rtp-stat detailed $session_id\n"]
            if {$output ne ""} {
                set rtp_sessions_array($global_id) $output
            }
        }
    }
}

send "exit\n"

#Output results in JSON format
puts [to_json]
  
set argc 0
set argv0 "expect"
set argv ""
