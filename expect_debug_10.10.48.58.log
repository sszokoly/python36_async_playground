parent: waiting for sync byte
parent: telling child to go ahead
parent: now unsynchronized from child
spawn: returns {7695}

expect: does "" (spawn_id exp5) match glob pattern "Password: "? no
Password: 
expect: does "\rPassword: " (spawn_id exp5) match glob pattern "Password: "? yes
expect: set expect_out(0,string) "Password: "
expect: set expect_out(spawn_id) "exp5"
expect: set expect_out(buffer) "\rPassword: "
send: sending "cmb@Dm1n\n" to { exp5 }

expect: does "" (spawn_id exp5) match glob pattern "*Permission denied*"? no
")# "? no


expect: does "\r\n" (spawn_id exp5) match glob pattern "*Permission denied*"? no
")# "? no

expect: does "\r\n\r" (spawn_id exp5) match glob pattern "*Permission denied*"? no
")# "? no




Last login: 2-Dec-2024 15:15:10

Survivable-call-engine is disabled

AvayaG450A-001(super)# 
expect: does "\r\n\r\n\r\n\r\n\r\nLast login: 2-Dec-2024 15:15:10\r\n\r\nSurvivable-call-engine is disabled\r\n\r\nAvayaG450A-001(super)# " (spawn_id exp5) match glob pattern "*Permission denied*"? no
")# "? yes
expect: set expect_out(0,string) ")# "
expect: set expect_out(spawn_id) "exp5"
expect: set expect_out(buffer) "\r\n\r\n\r\n\r\n\r\nLast login: 2-Dec-2024 15:15:10\r\n\r\nSurvivable-call-engine is disabled\r\n\r\nAvayaG450A-001(super)# "
send: sending "show system\n" to { exp5 }

expect: does "" (spawn_id exp5) match glob pattern "*continue-- "? no
"*to continue."? no
"*."? no
")# "? no
s
expect: does "s" (spawn_id exp5) match glob pattern "*continue-- "? no
"*to continue."? no
"*."? no
")# "? no
how system
System Name             : 
System Location         : 
System Contact          : 
Uptime (d,h:m:s)        : 39,00:27:12
Call Controller Time    : 15:15:37 02 DEC 2024 
Serial No               : 13TG01116522
Model                   : G450
Chassis HW Vintage      : 1
Chassis HW Suffix       : A
Mainboard HW Vintage    : 2
Mainboard HW Suffix     : B
Mainboard HW CS         : 2.1.7
Mainboard FW Vintage    : 42.24.0
LAN MAC Address         : 00:1b:4f:3f:73:e0
WAN1 MAC Address        : 00:1b:4f:3f:73:e1
WAN2 MAC Address        : 00:1b:4f:3f:73:e2
SERVICES MAC address    : 00:1b:4f:3f:73:e3
Memory #1               : 256MB
Memory #2               : Not present
Compact Flash Memory    : No CompactFlash card is installed
PSU #1                  : AC 400W
PSU #2                  : Not present
Media Socket #1         : MP160 VoIP DSP Module

--type q to quit or space key to continue-- 
expect: does "show system\r\nSystem Name             : \r\nSystem Location         : \r\nSystem Contact          : \r\nUptime (d,h:m:s)        : 39,00:27:12\r\nCall Controller Time    : 15:15:37 02 DEC 2024 \r\nSerial No               : 13TG01116522\r\nModel                   : G450\r\nChassis HW Vintage      : 1\r\nChassis HW Suffix       : A\r\nMainboard HW Vintage    : 2\r\nMainboard HW Suffix     : B\r\nMainboard HW CS         : 2.1.7\r\nMainboard FW Vintage    : 42.24.0\r\nLAN MAC Address         : 00:1b:4f:3f:73:e0\r\nWAN1 MAC Address        : 00:1b:4f:3f:73:e1\r\nWAN2 MAC Address        : 00:1b:4f:3f:73:e2\r\nSERVICES MAC address    : 00:1b:4f:3f:73:e3\r\nMemory #1               : 256MB\r\nMemory #2               : Not present\r\nCompact Flash Memory    : No CompactFlash card is installed\r\nPSU #1                  : AC 400W\r\nPSU #2                  : Not present\r\nMedia Socket #1         : MP160 VoIP DSP Module\r\n\r\n--type q to quit or space key to continue-- " (spawn_id exp5) match glob pattern "*continue-- "? yes
expect: set expect_out(0,string) "show system\r\nSystem Name             : \r\nSystem Location         : \r\nSystem Contact          : \r\nUptime (d,h:m:s)        : 39,00:27:12\r\nCall Controller Time    : 15:15:37 02 DEC 2024 \r\nSerial No               : 13TG01116522\r\nModel                   : G450\r\nChassis HW Vintage      : 1\r\nChassis HW Suffix       : A\r\nMainboard HW Vintage    : 2\r\nMainboard HW Suffix     : B\r\nMainboard HW CS         : 2.1.7\r\nMainboard FW Vintage    : 42.24.0\r\nLAN MAC Address         : 00:1b:4f:3f:73:e0\r\nWAN1 MAC Address        : 00:1b:4f:3f:73:e1\r\nWAN2 MAC Address        : 00:1b:4f:3f:73:e2\r\nSERVICES MAC address    : 00:1b:4f:3f:73:e3\r\nMemory #1               : 256MB\r\nMemory #2               : Not present\r\nCompact Flash Memory    : No CompactFlash card is installed\r\nPSU #1                  : AC 400W\r\nPSU #2                  : Not present\r\nMedia Socket #1         : MP160 VoIP DSP Module\r\n\r\n--type q to quit or space key to continue-- "
expect: set expect_out(spawn_id) "exp5"
expect: set expect_out(buffer) "show system\r\nSystem Name             : \r\nSystem Location         : \r\nSystem Contact          : \r\nUptime (d,h:m:s)        : 39,00:27:12\r\nCall Controller Time    : 15:15:37 02 DEC 2024 \r\nSerial No               : 13TG01116522\r\nModel                   : G450\r\nChassis HW Vintage      : 1\r\nChassis HW Suffix       : A\r\nMainboard HW Vintage    : 2\r\nMainboard HW Suffix     : B\r\nMainboard HW CS         : 2.1.7\r\nMainboard FW Vintage    : 42.24.0\r\nLAN MAC Address         : 00:1b:4f:3f:73:e0\r\nWAN1 MAC Address        : 00:1b:4f:3f:73:e1\r\nWAN2 MAC Address        : 00:1b:4f:3f:73:e2\r\nSERVICES MAC address    : 00:1b:4f:3f:73:e3\r\nMemory #1               : 256MB\r\nMemory #2               : Not present\r\nCompact Flash Memory    : No CompactFlash card is installed\r\nPSU #1                  : AC 400W\r\nPSU #2                  : Not present\r\nMedia Socket #1         : MP160 VoIP DSP Module\r\n\r\n--type q to quit or space key to continue-- "
send: sending "\n" to { exp5 }
expect: continuing expect

expect: does "" (spawn_id exp5) match glob pattern "*continue-- "? no
"*to continue."? no
"*."? no
")# "? no

expect: does "\r" (spawn_id exp5) match glob pattern "*continue-- "? no
"*to continue."? no
"*."? no
")# "? no
[KMedia Socket #2         : Not present
Media Socket #3         : Not present
Media Socket #4         : Not present
FAN Tray                : Present
AvayaG450A-001(super)# 
expect: does "\r\u001b[KMedia Socket #2         : Not present\r\nMedia Socket #3         : Not present\r\nMedia Socket #4         : Not present\r\nFAN Tray                : Present\r\nAvayaG450A-001(super)# " (spawn_id exp5) match glob pattern "*continue-- "? no
"*to continue."? no
"*."? no
")# "? yes
expect: set expect_out(0,string) ")# "
expect: set expect_out(spawn_id) "exp5"
expect: set expect_out(buffer) "\r\u001b[KMedia Socket #2         : Not present\r\nMedia Socket #3         : Not present\r\nMedia Socket #4         : Not present\r\nFAN Tray                : Present\r\nAvayaG450A-001(super)# "
send: sending "show capture\n" to { exp5 }

expect: does "" (spawn_id exp5) match glob pattern "*continue-- "? no
"*to continue."? no
"*."? no
")# "? no
s
expect: does "s" (spawn_id exp5) match glob pattern "*continue-- "? no
"*to continue."? no
"*."? no
")# "? no
how capture

Capture service is enabled and inactive
Capture start time not-started
Capture stop time not-stopped
Current buffer size is 1024 KB
Buffer mode is cyclic
Maximum number of bytes captured from each frame: 1500
Capture list 500 on all interfaces
Capture IPSec decrypted
Number of captured frames in file: 0 (out of 0 total captured frames)
Memory buffer occupancy: 0.0 % (including overheads)
AvayaG450A-001(super)# 
expect: does "show capture\r\n\r\nCapture service is enabled and inactive\r\nCapture start time not-started\r\nCapture stop time not-stopped\r\nCurrent buffer size is 1024 KB\r\nBuffer mode is cyclic\r\nMaximum number of bytes captured from each frame: 1500\r\nCapture list 500 on all interfaces\r\nCapture IPSec decrypted\r\nNumber of captured frames in file: 0 (out of 0 total captured frames)\r\nMemory buffer occupancy: 0.0 % (including overheads)\r\nAvayaG450A-001(super)# " (spawn_id exp5) match glob pattern "*continue-- "? no
"*to continue."? no
"*."? yes
expect: set expect_out(0,string) "show capture\r\n\r\nCapture service is enabled and inactive\r\nCapture start time not-started\r\nCapture stop time not-stopped\r\nCurrent buffer size is 1024 KB\r\nBuffer mode is cyclic\r\nMaximum number of bytes captured from each frame: 1500\r\nCapture list 500 on all interfaces\r\nCapture IPSec decrypted\r\nNumber of captured frames in file: 0 (out of 0 total captured frames)\r\nMemory buffer occupancy: 0."
expect: set expect_out(spawn_id) "exp5"
expect: set expect_out(buffer) "show capture\r\n\r\nCapture service is enabled and inactive\r\nCapture start time not-started\r\nCapture stop time not-stopped\r\nCurrent buffer size is 1024 KB\r\nBuffer mode is cyclic\r\nMaximum number of bytes captured from each frame: 1500\r\nCapture list 500 on all interfaces\r\nCapture IPSec decrypted\r\nNumber of captured frames in file: 0 (out of 0 total captured frames)\r\nMemory buffer occupancy: 0."
expect: continuing expect

expect: does "0 % (including overheads)\r\nAvayaG450A-001(super)# " (spawn_id exp5) match glob pattern "*continue-- "? no
"*to continue."? no
"*."? no
")# "? yes
expect: set expect_out(0,string) ")# "
expect: set expect_out(spawn_id) "exp5"
expect: set expect_out(buffer) "0 % (including overheads)\r\nAvayaG450A-001(super)# "
send: sending "exit\n" to { exp5 }
argv[0] = expect  argv[1] = -c  argv[2] = 
#!/usr/bin/expect
log_user 0
set log_file expect_debug_10.10.48.58.log

if {[info exists log_file] && $log_file ne "/dev/null"} {
    if {[file exists $log_file]} {
        file delete $log_file
    }
}

exp_internal -f $log_file 0

################################# Variables ##################################

set timeout 10
set host 10.10.48.58
set user root
set passwd cmb@Dm1n
set prompt "\)# "
set commands { "show system" "show capture" }
array set commands_array {}

################################# Procedures #################################

proc to_json {} {
    global host gw_number commands_array
    set json "{"
    append json "\"host\": \"$host\", "
    append json "\"gw_number\": \"$gw_number\", "  
    if {[llength [array names commands_array]] > 0} {
        append json "\"commands\": {"
        foreach {key value} [array get commands_array] {
            append json "\"$key\": \"$value\", "
        }
        set json [string trimright $json ", "]
        append json "}"
    }
    set json [string trimright $json ", "]
    append json "}"
    return $json
}


proc clean_output {output} {
    #set type_removed [string map {"\r\n--type q to quit or space key to continue-- \r\u\001b[K" ""} $output]
    set type_removed [regsub "\r\n--type q to quit or space key to continue-- \r\[^ \]K" $output ""]
    set note_removed [regsub "Note that field.*" $type_removed ""]
    set done_removed [regsub "Done!.*" $note_removed ""]
    set prompt_removed [regsub "\r?\n\[^ \]*\[)\]# " $done_removed ""]
    set result [string trimright $prompt_removed "\r\n"]
    return $result
}

proc cmd {command} {
    global prompt
    set output ""
    send "$command"
    expect {
        "*continue-- " {
            set current_output $expect_out(buffer)
            append output $current_output
            send "\n"
            exp_continue
        }
        "*to continue." {
            set current_output $expect_out(buffer)
            append output $current_output
            sleep 3
            exp_continue
        }
        "*." {
            set current_output $expect_out(buffer)
            append output $current_output
            sleep 3
            exp_continue
        }
        $prompt {
            set current_output $expect_out(buffer)
            append output $current_output
        }
        timeout {
            puts stderr "Timeout";
            return ""
        }
    }
    set result [clean_output $output]
    return [string trimleft $result $command]
}

#################################### Main ####################################

#Spawn SSH connection
spawn ssh -q -o StrictHostKeyChecking=no -o UserKnownHostsFile=/dev/null $user@$host

#Handle SSH connection
expect {
    "Password: " {send "$passwd\n"}
    timeout {
        puts stderr "Timeout";
        exit 255
    }
    eof {
        puts stderr "Timeout";
        exit 255
    }
}
expect {
    "*Permission denied*" {
        puts stderr "Permission denied";
        exit 254
    }
    $prompt {}
}

#Extract gateway number from prompt
regexp {([^\s]+)-(\d+)[\(]} $expect_out(buffer) "" _ gw_number
if {$gw_number ne ""} {
    set gw_number $gw_number
} else {
    set gw_number ""
}

#Iterate through "commands" and run each
foreach command $commands {
    set output [cmd "$command\n"]
    if {$output ne ""} {
        set commands_array($command) $output
    }
}

send "exit\n"

#Output results in JSON format
puts [to_json]
  
set argc 0
set argv0 "expect"
set argv ""
